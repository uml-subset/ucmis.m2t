[comment encoding = UTF-8 /]
[**
 * All templates in the *Xsd.mtl modules generate XML Schema code.
 */]
[module modelXsdFile('http://www.eclipse.org/uml2/5.0.0/UML', 'http://www.eclipse.org/uml2/5.0.0/Types', 'http://www.eclipse.org/uml2/5.0.0/UML/Profile/Standard')/]

[import query::modelQuery/]
[import target::xsd::classXsd /]
[import target::xsd::dataTypeXsd /]
[import target::xsd::enumerationXsd /]
[import target::xsd::commonXsd /]

[**
 Processes a UML class model that meets the requirements of UCMIS.
 Creates a file for the model.
 /]
[template public processModelXsd(aModel : uml::Model)]
  [file ( aModel.u_modelShortName() + '/encoding/xml-schema/' + aModel.u_modelAcronym().toLower() + '.xsd', overwrite ) ]
    [aModel.xsdHeader()/]
    [if ( 'DDI-CDI'.ownGetProperty() = 'true' )]
        [aModel.xsdWrapper()/]
    [/if]
    [for ( aClass : uml::Class | aModel.u_mainPackage().eAllContents(uml::Class)
        ->sortedBy( c | c.name) ) ]
        [aClass.classXsd()/]
    [/for]
    [for ( anEnumeration : uml::Enumeration | aModel.u_mainPackage().eAllContents(uml::Enumeration)
        ->sortedBy( self | self.name) ) ]
        [anEnumeration.enumerationXsd()/]
    [/for]
    [for ( aDataType : uml::DataType | aModel.u_mainPackage().eAllContents(uml::DataType)
      ->select( d | not( d.oclIsTypeOf( uml::Enumeration ) ) and
        not( d.oclIsTypeOf( uml::PrimitiveType ) ) )
      ->sortedBy( self | self.qualifiedName)
      ) ]
        [aDataType.dataTypeXsd()/]
    [/for]
    [aModel.xsdFooter()/]
  [/file]
[/template]

[template public xsdHeader( aModel : uml::Model )]
  <?xml version="1.0" encoding="UTF-8"?>
  [aModel.xsdGenerationMessage()/]
  [aModel.xsdModelIdentificationComment()/]
  <xs:schema xmlns="['XSD_NS'.ownGetProperty()/]"
             xmlns:xs="http://www.w3.org/2001/XMLSchema"
             xmlns:vc="http://www.w3.org/2007/XMLSchema-versioning"
             targetNamespace="['XSD_NS'.ownGetProperty()/]"
             elementFormDefault="qualified"
             attributeFormDefault="unqualified"
             version="[aModel.u_modelVersion()/]"
             vc:minVersion="1.1">
    <xs:import namespace="http://www.w3.org/XML/1998/namespace"
               schemaLocation="xml.xsd"/>
    <xs:group name="AllElementsDerivedFromClasses">
      <xs:annotation>
        <xs:documentation>This group comprehends all elements which are based on classes in the UML model.</xs:documentation>
      </xs:annotation>
      <xs:sequence>
        <xs:choice minOccurs="1"
                   maxOccurs="unbounded">
          [for ( aClass : uml::Class | aModel.u_mainPackage().eAllContents(uml::Class)
            ->sortedBy( c | c.name )
            ) ]
            <xs:element ref="[aClass.name/]" minOccurs="0" maxOccurs="unbounded"/>
          [/for]
        </xs:choice>
      </xs:sequence>
    </xs:group>
    <xs:element name="[aModel.name/]"
                type="[aModel.name/]XsdType"
                xml:id="[aModel.name/]">
      <xs:annotation>
        [aModel.u_trimmedDocumentation().uxsd_escapeXmlCharacter().uxsd_documentation() /]
      </xs:annotation>
    </xs:element>
    <xs:complexType name="[aModel.name/]XsdType"
                    xml:id="[aModel.name/]XsdType">
      <xs:annotation>
        [aModel.u_trimmedDocumentation().uxsd_escapeXmlCharacter().uxsd_documentation() /]
      </xs:annotation>
      <xs:sequence>
        <xs:group ref="AllElementsDerivedFromClasses"
                  minOccurs="1"
                  maxOccurs="1">
        </xs:group>
        [if ( 'DDI-CDI'.ownGetProperty() = 'true' )]<xs:element ref="Wrapper" minOccurs="0" maxOccurs="unbounded"/>[/if]
      </xs:sequence>
    </xs:complexType>
[/template]

[template public xsdFooter( aModel : uml::Model )]
  </xs:schema>
[/template]

[template public xsdGenerationMessage( aModel: uml::Model ) ]
  <!--
     PLEASE DO NOT EDIT THIS CODE!
     This code was generated by the Eclipse Acceleo module UCMIS M2T on TODO getCurrentTime()/].
     Target language is 'XML Schema' ('xsd') generated on the basis of the model '[aModel.name/]'.
  -->
[/template]

[template public xsdModelIdentificationComment( aModel : uml::Model ) ]
  <!--
  
  XML Schema generated on the basis of the UML model [aModel.u_modelAcronym() /].
  
  Acronym:       [aModel.u_modelAcronym() /] 
  Title:         [aModel.u_modelTitle() /]
  Subtitle:      [aModel.u_modelSubtitle() /]
  Major version: [aModel.u_modelMajorVersion() /]
  Minor version: [aModel.u_modelMinorVersion() /]
  URI:           [aModel.u_modelUri() /]
  
  -->
[/template]

[comment] used only for DDI-CDI [/comment]
[template public xsdWrapper( aModel : uml::Model ) ]
  <xs:element name="Wrapper"
              type="WrapperXsdType"
              xml:id="Wrapper">
    <xs:annotation>
      <xs:documentation>Definition
            ==========
            Information structured according to the DDI-CDI model for a specific purpose or purposes within a system or community.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="WrapperXsdType"
                  xml:id="WrapperXsdType">
    <xs:annotation>
      <xs:documentation>Definition
            ==========
            Information structured according to the DDI-CDI model for a specific purpose or purposes within a system or community.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="identifier"
                  type="IdentifierXsdType"
                  minOccurs="0"
                  maxOccurs="1"
                  xml:id="Wrapper-identifier">
        <xs:annotation>
          <xs:documentation>Identifier for objects requiring short- or long-lasting referencing and management.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="supportingInformation"
                  type="ReferenceXsdType"
                  minOccurs="0"
                  maxOccurs="unbounded"
                  xml:id="Wrapper-supportingInformation">
        <xs:annotation>
          <xs:documentation>Information structured according to a non-DDI-CDI specification which is relevant to the understanding and/or processing of the content of Wrapper.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:group ref="AllElementsDerivedFromClasses"
                minOccurs="1"
                maxOccurs="1">
      </xs:group>
    </xs:sequence>
  </xs:complexType>
[/template]
