[comment encoding = UTF-8 /]
[**
 * All templates in the *Xsd.mtl modules generate XML Schema code.
 */]
[module classXsd('http://www.eclipse.org/uml2/5.0.0/UML', 'http://www.eclipse.org/uml2/5.0.0/Types', 'http://www.eclipse.org/uml2/5.0.0/UML/Profile/Standard')/]

[import query::modelQuery/]
[import target::xsd::commonXsd/]

[**
 * Generates XML Schema code for a class.
 */]
[template public classXsd(aClass : uml::Class)]
  <xs:element name="[aClass.name/]"
              type="[aClass.name/]XsdType"
              xml:id="[aClass.name/]">
    <!-- based on the UML class [aClass.qualifiedName/] -->
    <xs:annotation>
      [aClass.u_trimmedDocumentation().uxsd_escapeXmlCharacter().uxsd_documentation() /]
    </xs:annotation>
  </xs:element>
  <xs:complexType name="[aClass.name/]XsdType"
                  xml:id="[aClass.name/]XsdType">
    <xs:annotation>
      [aClass.u_trimmedDocumentation().uxsd_escapeXmlCharacter().uxsd_documentation() /]
    </xs:annotation>
    [if (aClass.superClass->notEmpty())]
      <xs:complexContent>
        <xs:extension base="[aClass.superClass.name/]XsdType">
          [if ( aClass.eContents(uml::Property)->notEmpty() ) ]
            [aClass.propertyXsd()/]
          [/if]
        </xs:extension>
      </xs:complexContent>
    [else]
      [if ( aClass.eContents(uml::Property)->notEmpty() ) ]
        [aClass.propertyXsd()/]
      [/if]
    [/if]
  </xs:complexType>[/template]

[template public propertyXsd(aClass : uml::Class)]
  <xs:sequence>
    [for (anAttribute : uml::Property | aClass.u_attributes())]
      <xs:element name="[anAttribute.name/]"
                  type="[anAttribute.type.uxsd_typeName()/]"
                  minOccurs="[anAttribute.lower/]"
                  maxOccurs="[anAttribute.uxsd_upperCardinality()/]"
                  xml:id="[aClass.name.concat('-').concat(anAttribute.name)/]">
        <xs:annotation>
          [anAttribute.u_trimmedDocumentation().uxsd_escapeXmlCharacter().uxsd_documentation() /]
        </xs:annotation>
      </xs:element>
    [/for]
    [for (aProperty : uml::Property | aClass.u_associationProperties())]
      [let sourceClassProperty : uml::Property = aProperty.association.ownedEnd->first()]
        [let targetClassProperty : uml::Property = sourceClassProperty.getOtherEnd()]
          <xs:element name="[aProperty.association.name/]"
                      minOccurs="[targetClassProperty.lower/]"
                      maxOccurs="[targetClassProperty.uxsd_upperCardinality()/]"
                      xml:id="[aProperty.association.name/]">
            <xs:annotation>
              [aProperty.association.u_trimmedDocumentation().uxsd_escapeXmlCharacter().uxsd_documentation() /]
            </xs:annotation>
            <xs:complexType>
              <xs:complexContent>
                <xs:restriction base="AssociationReferenceXsdType">
                  <xs:sequence>
                    <xs:element name="ddiReference"
                                type="InternationalRegistrationDataIdentifierXsdType"
                                minOccurs="0"
                                maxOccurs="1"
                                xml:id="[aProperty.association.name + '-ddiReference'/]"/>
                    <xs:element name="validType"
                                minOccurs="[sourceClassProperty.lower/]"
                                maxOccurs="[sourceClassProperty.uxsd_upperCardinality()/]"
                                xml:id="[aProperty.association.name + '-validType'/]">
                      <xs:simpleType>
                        <xs:restriction base="xs:NMTOKEN">
                          [targetClassProperty.type.uxsd_referenceClass()/]
                        </xs:restriction>
                      </xs:simpleType>
                    </xs:element>
                  </xs:sequence>
                </xs:restriction>
              </xs:complexContent>
            </xs:complexType>
          </xs:element>
        [/let]
      [/let]
    [/for]
  </xs:sequence>
[/template]
