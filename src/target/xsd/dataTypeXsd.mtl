[comment encoding = UTF-8 /]
[**
 * All templates in the *Xsd.mtl modules generate XML Schema code.
 */]
[module dataTypeXsd('http://www.eclipse.org/uml2/5.0.0/UML', 'http://www.eclipse.org/uml2/5.0.0/Types', 'http://www.eclipse.org/uml2/5.0.0/UML/Profile/Standard')/]

[import query::modelQuery/]
[import target::xsd::commonXsd/]

[**
 * Generates XML Schema code for a data type
 * (not for enumerations and primitive types).
 */]
[template public dataTypeXsd(aDataType : uml::DataType) ]
  <xs:element name="[aDataType.name/]"
              type="[aDataType.name/]XsdType"
              xml:id="[aDataType.name/]">
    <!-- based on the UML data type [aDataType.qualifiedName/] -->
    <xs:annotation>
      [aDataType.u_trimmedDocumentation().uxsd_escapeXmlCharacter().uxsd_documentation() /]
    </xs:annotation>
  </xs:element>
  <xs:complexType name="[aDataType.name/]XsdType"
                  xml:id="[aDataType.name/]XsdType">
    <xs:annotation>
      [aDataType.u_trimmedDocumentation().uxsd_escapeXmlCharacter().uxsd_documentation() /]
    </xs:annotation>
    [if ( aDataType.general->notEmpty() )]
      <xs:complexContent>
        <xs:extension base="[aDataType.general->first().name/]XsdType">
          [if (aDataType.u_attributes()->notEmpty())]
            [aDataType.attributeXsd(aDataType.name)/]
          [/if]
        </xs:extension>
      </xs:complexContent>
    [else]
      [if (aDataType.u_attributes()->notEmpty())]
        [aDataType.attributeXsd(aDataType.name)/]
      [/if]
    [/if]
  </xs:complexType>
[if ('DDI-CDI'.ownGetProperty() = 'true' and aDataType.name = 'Reference')]
    <xs:element name="AssociationReference"
                type="AssociationReferenceXsdType"
                xml:id="AssociationReference">
      <!-- related to the UML data type [aDataType.qualifiedName/] -->
      <xs:annotation>
        ['AssociationReference '.concat(aDataType.u_trimmedDocumentation()).uxsd_escapeXmlCharacter().uxsd_documentation() /]
      </xs:annotation>
    </xs:element>
    <xs:complexType name="AssociationReferenceXsdType"
                    xml:id="AssociationReferenceXsdType">
      <xs:annotation>
        ['AssociationReference '.concat(aDataType.u_trimmedDocumentation()).uxsd_escapeXmlCharacter().uxsd_documentation() /]
      </xs:annotation>
          <xs:sequence>
            <xs:element name="ddiReference"
                        type="InternationalRegistrationDataIdentifierXsdType"
                        minOccurs="0"
                        maxOccurs="1"
                        xml:id="AssociationReference-ddiReference">
              <xs:annotation>
                <xs:documentation>A DDI type reference to a DDI object.</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="validType"
                        type="xs:string"
                        minOccurs="0"
                        maxOccurs="unbounded"
                        xml:id="AssociationReference-validType">
              <xs:annotation>
                <xs:documentation>The expected type of the reference (e.g., the class or element according to the schema of the referenced resource).</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
          <xs:attribute name="isAssociationReference"
                        type="xs:boolean"
                        fixed="true"
                        xml:id="isAssociationReference"/>
    </xs:complexType>[/if]
[/template]

[comment multiplicity control/]
[template public attributeXsd(aDataType : uml::DataType, itemName : String)]
  <xs:sequence>
    [for (anAttribute : uml::Property | aDataType.u_attributes())]
      <xs:element name="[anAttribute.name/]"
                  type="[anAttribute.type.uxsd_typeName()/]"
                  minOccurs="[anAttribute.lower/]"
                  maxOccurs="[anAttribute.uxsd_upperCardinality()/]"
                  xml:id="[itemName.concat('-').concat(anAttribute.name)/]">
        <xs:annotation>
          [anAttribute.u_trimmedDocumentation().uxsd_escapeXmlCharacter().uxsd_documentation() /]
        </xs:annotation>
      </xs:element>
    [/for]
  </xs:sequence>
[/template]