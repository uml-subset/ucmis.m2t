[comment encoding = UTF-8 /]
[**
 * Helpers for XSD. Names starting with 'uxsd_'
 */]
[module commonXsd('http://www.eclipse.org/uml2/5.0.0/UML', 'http://www.eclipse.org/uml2/5.0.0/Types', 'http://www.eclipse.org/uml2/5.0.0/UML/Profile/Standard')/]

[import query::modelQuery/]

[**
 * TODO
 */]
[template public uxsd_referenceClass(aType : uml::Type) post(self.trim())]
  [let aClass = aType.oclAsType(uml::Class)]
    [if (aClass.e_allSubclassesPlusSelfNonAbstract()->notEmpty())]
      [for (aSubClass : uml::Class | aClass.e_allSubclassesPlusSelfNonAbstract())]
        <xs:enumeration value="[aSubClass.name/]"/>
      [/for]
    [else]
      <xs:enumeration value="[aClass.name/]"/>
    [/if]
  [/let]
[/template]


[**
 * Returns the upper cardinality of a property in XSD syntax as a string.
 */]
[query public uxsd_upperCardinality(aProperty : uml::Property) : String =
  if aProperty.upper = -1 then
    'unbounded'
  else
    aProperty.upper.toString()
  endif
/]

[**
 * Returns the type in XSD syntax as string.
 */]
[query public uxsd_typeName(aType : uml::Type) : String =
  if aType.u_typeName() = 'Boolean' then 'xs:boolean'
    else if aType.u_typeName() = 'Integer' then 'xs:integer'
      else if aType.u_typeName() = 'String' then 'xs:string'
        else if aType.u_typeName() = 'Real' then 'xs:double'
          else if aType.package.name = 'XMLSchemaDataTypes' then aType.name.uxsd_primitive()
            else aType.u_typeName().concat('XsdType')
          endif
        endif
      endif
    endif
  endif
/]

[template public Xuxsd_typeName(aType : uml::Type) post(self.trim()) ]
  [if ( aType.u_typeName() = 'Boolean' )]
    'xs:boolean'
  [elseif ( aType.u_typeName() = 'Integer' )]
    'xs:integer'
  [elseif ( aType.u_typeName() = 'String' )]
    'xs:string'
  [elseif ( aType.u_typeName() = 'Real' )]
    'xs:double'
  [elseif ( aType.package.name = 'XMLSchemaDataTypes' )]
    [aType.name.uxsd_primitive() /]
  [else]
    [aType.u_typeName().concat('XsdType') /]
  [/if]
[/template]
[comment Alternative template. /]

[**
 * Returns the XSD type in XSD syntax as string.
 */]
[query public uxsd_primitive(aString : String) : String =
  if aString = 'XsdAnyUri' then 'xs:anyURI'
    else if aString = 'XsdDate' then 'xs:date'
      else if aString = 'XsdLanguage' then 'xs:language'
        else ''
      endif
    endif
  endif
/]

[**
 * Returns the specified string with escaped XML characters.
 */]
[query public uxsd_escapeXmlCharacter(s : String) : String =
  s.replaceAll('&', '&amp;')
    .replaceAll('<', '&lt;')
    .replaceAll('>', '&gt;')
/]

[template public Xuxsd_escapeXmlCharacter(s : String) post(self.trim())]
  [s.replaceAll('&', '&amp;').replaceAll('<', '&lt;').replaceAll('>', '&gt;')/]
[/template]
[comment Alternative template. /]

[**
 * Returns the specified string as XSD documentation element as string.
 */]
[query public uxsd_documentation(s : String) : String =
  '<xs:documentation>' + s + '</xs:documentation>'
/]
[comment]
Workaround for the issue that a leading string before the documentation
with newlines is repeated per line.
[/comment]
